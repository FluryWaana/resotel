<UserControl x:Class="Resotel.Views.BedroomControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:local="clr-namespace:Resotel.Views"
             xmlns:fa="clr-namespace:Meziantou.WpfFontAwesome;assembly=Meziantou.WpfFontAwesome"
             xmlns:ViewsModels="clr-namespace:Resotel.ViewsModels"
             HorizontalAlignment="Stretch" 
             VerticalAlignment="Stretch" 
             Padding="10 0 10 0">
    
    <!-- Déclaration du DataContext dans le .XAML au lieu du .CS (cela ne change rien) -->
    <UserControl.DataContext>
        <ViewsModels:BedroomViewModel/>
    </UserControl.DataContext>
    
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BoolVisibilityConverter"/>
    </UserControl.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="42*"/>
        </Grid.RowDefinitions>

        <TextBlock HorizontalAlignment="Left"
                   TextAlignment="Left"
                   FontFamily="Segoe UI"
                   FontSize="30"
                   FontWeight="Light"
                   Foreground="WhiteSmoke"
                   Text="Liste des chambres" Grid.Row="0"/>

        <Border BorderBrush="WhiteSmoke" Grid.Row="1" BorderThickness="1" Margin="0 0 0 15" />

        <Button Grid.Row="2" Command="{Binding BtnShowFilter}" >
            <StackPanel Orientation="Horizontal">
                <fa:FontAwesomeIcon SolidIcon="Filter" Margin="0 0 5 0"/>
                <TextBlock Text="Filtrer"/>
            </StackPanel>
        </Button>
        
        <Border Grid.Row="3" 
                BorderBrush="{DynamicResource PrimaryHueMidBrush}" 
                BorderThickness="2" 
                Padding="8"
                CornerRadius="10"
                Margin="0 10 0 0"
                Visibility="{Binding ShowFilter, Converter={StaticResource BoolVisibilityConverter}}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <Grid.ColumnDefinitions>
                    <ColumnDefinition  Width="*" />
                    <ColumnDefinition  Width="*" />
                    <ColumnDefinition  Width="*" />
                </Grid.ColumnDefinitions>

                <Grid.Resources>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Margin" Value="10 0 10 0"/>
                    </Style>
                    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                        <Setter Property="Margin" Value="10 0 10 0"/>
                    </Style>
                    <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource {x:Type DatePicker}}">
                        <Setter Property="Margin" Value="10 10 10 0"/>
                    </Style>
                </Grid.Resources>

                <TextBlock Grid.Row="0" Grid.Column="0" Text="Type de chambre" />
                <ComboBox Grid.Row="1" Grid.Column="0"
                          ItemsSource="{Binding BedroomType}" 
                          DisplayMemberPath="bedroom_type1"
                          SelectedValue="{Binding Path=Bedroom_type}"/>

                <TextBlock Grid.Row="0" Grid.Column="1" Text="Étage" />
                <ComboBox Grid.Row="1" Grid.Column="1"
                      ItemsSource="{Binding Floors}" 
                      SelectedValue="{Binding Path=Floor_filter}"/>

                <TextBlock Grid.Row="0" Grid.Column="2" Text="Statut" />
                <ComboBox Grid.Row="1" Grid.Column="2" 
                      ItemsSource="{Binding Statuts}" 
                      SelectedValue="{Binding Path=StatutString}"/>

                <Button Content="Rénitialiser" Grid.Row="2" Grid.Column="1" Margin="0 10 0 0" Command="{Binding BtnResetFilter}"/>

            </Grid>
        </Border>

        <DataGrid Grid.Row="4" ItemsSource="{Binding Bedrooms}"
                  VerticalScrollBarVisibility="Visible"
                  CanUserReorderColumns="False" 
                  CanUserResizeColumns="False" 
                  CanUserResizeRows="False" 
                  CanUserSortColumns="True"
                  AlternatingRowBackground="DarkGray"
                  AlternationCount="2"
                  IsReadOnly="True"
                  SelectionMode="Single"
                  SelectionUnit="FullRow"
                  AutoGenerateColumns="False">

            <DataGrid.Resources>
                <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="DimGray" />
                            <Setter Property="BorderBrush" Value="DimGray" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>

            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Numéro" Width="Auto" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding bedroom_number}" TextAlignment="Center"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Type de chambre" Width="Auto" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding bedroom_type.bedroom_type1}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Étage" Width="Auto" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding bedroom_floor}" TextAlignment="Center"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Statut" Width="*" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding bedroom_status}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Width="Auto" IsReadOnly="True" Visibility="{Binding DataContext.AuthVM.RoleNettoyage, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource BoolVisibilityConverter}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <!-- Dans un datatemplate, pour accéder à un ICommand, il faut aller chercher le context du parent -->
                            <Button Content="Nettoyer" 
                                    Command="{Binding DataContext.BtnUpdateBedroomStatut, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}"
                                    CommandParameter="{Binding bedroom_number}">
                                <Button.Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                        <Setter Property="Visibility" Value="Hidden" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding bedroom_status}" Value="à nettoyer">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
